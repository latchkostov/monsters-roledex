{"version":3,"sources":["components/card/card.component.tsx","components/card-list/card-list.component.tsx","components/search-box/search-box.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","_ref","monster","react_default","a","createElement","className","alt","src","concat","id","name","email","CardList","monsters","map","card_component_Card","key","SearchBox","placeHolder","handleChange","type","placeholder","onChange","e","target","value","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchField","_this2","fetch","then","response","json","users","setState","_this3","_this$state","filteredMonsters","filter","toLowerCase","includes","search_box_component_SearchBox","searchValue","handleSearchBoxState","card_list_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAQaA,qBAAqC,SAAAC,GAAe,IAAbC,EAAaD,EAAbC,QAChD,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAClBH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,UAAUC,IAAG,wBAAAC,OAA0BP,EAAQQ,GAAlC,4BACtBP,EAAAC,EAAAC,cAAA,UAAKH,EAAQS,MACbR,EAAAC,EAAAC,cAAA,SAAIH,EAAQU,UCHPC,EAA6C,SAAAZ,GAAgB,IAAda,EAAcb,EAAda,SACxD,OAAOX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEdQ,EAASC,IAAI,SAACb,GACZ,OAAOC,EAAAC,EAAAC,cAACW,EAAD,CAAMC,IAAKf,EAAQQ,GAAIR,QAASA,QCLxCgB,SAA+C,SAAAjB,GAAmD,IAAhDkB,EAAgDlB,EAAhDkB,YAAaC,EAAmCnB,EAAnCmB,aACxE,OAAOjB,EAAAC,EAAAC,cAAA,SACHC,UAAU,SACVe,KAAK,SACLC,YAAaH,EACbI,SAAU,SAACC,GAAD,OAAOJ,EAAaI,EAAEC,OAAOC,YCqChCC,cA1Cb,SAAAA,EAAYC,GAAY,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACtBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXtB,SAAU,GAEVuB,YAAa,IALOR,mFASJ,IAAAS,EAAAN,KAClBO,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJL,EAAKM,SAAS,CAAC9B,SAAU6B,uCAItB,IAAAE,EAAAb,KAAAc,EAC2Bd,KAAKI,MAA/BtB,EADDgC,EACChC,SAAUuB,EADXS,EACWT,YACZU,EAAmBjC,EAASkC,OAAO,SAAC9C,GAAD,OACvCA,EAAQS,KAAKsC,cAAcC,SAASb,EAAYY,iBAGlD,OACE9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAC8C,EAAD,CACEhC,YAAY,kBACZC,aACE,SAACgC,GAAD,OAAiBP,EAAKQ,qBAAqBD,MAG/CjD,EAAAC,EAAAC,cAACiD,EAAD,CAAUxC,SAAUiC,kDAKLrB,GACnBM,KAAKY,SAAS,CAACP,YAAaX,WAvCd6B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.bef0a94c.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react';\r\nimport './card.styles.css';\r\nimport { Monster } from '../../monster';\r\n\r\ntype CardProps = {\r\n    monster: Monster\r\n}\r\n\r\nexport const Card: FunctionComponent<CardProps> = ({monster}) => {\r\n    return <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} />\r\n        <h1>{monster.name}</h1>\r\n        <p>{monster.email}</p>\r\n    </div>\r\n}","import React, { FunctionComponent } from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component';\r\nimport { Monster } from '../../monster';\r\n\r\ntype CardListProps = {\r\n    monsters: Monster[]\r\n}\r\n\r\nexport const CardList: FunctionComponent<CardListProps> = ({monsters}) => {\r\n    return <div className=\"card-list\">\r\n        {\r\n            monsters.map((monster: Monster) => {\r\n              return <Card key={monster.id} monster={monster} />\r\n            })\r\n        }\r\n    </div>\r\n}","import React, { FunctionComponent } from 'react';\r\nimport './search-box.styles.css';\r\n\r\ninterface SearchBoxProps {\r\n    placeHolder: string,\r\n    handleChange: (value: string) => any\r\n}\r\n\r\nexport const SearchBox: FunctionComponent<SearchBoxProps> = ({ placeHolder, handleChange }: SearchBoxProps) => {\r\n    return <input\r\n        className='search'\r\n        type='search'\r\n        placeholder={placeHolder}\r\n        onChange={(e) => handleChange(e.target.value)}\r\n    />\r\n}","import React, {Component} from 'react';\nimport './App.css';\n\nimport { AppState } from './app.state';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component<{}, AppState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      monsters: [\n      ],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => {\n        this.setState({monsters: users})\n      });\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster: any) => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Roledex</h1>\n        <SearchBox \n          placeHolder='search monsters'\n          handleChange={\n            (searchValue) => this.handleSearchBoxState(searchValue)\n          }\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n\n  handleSearchBoxState(value: string) {\n    this.setState({searchField: value})\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}